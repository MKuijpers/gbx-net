@using GBX.NET
@using GBX.NET.Attributes
@using System.Collections
@using System.Runtime.CompilerServices

@inject ILogger Logger
@inject IValueRendererService ValueRendererService
@inject ITypeCacheService TypeCacheService
@inject ISelectionService SelectionService
@inject IOpenChunkService OpenChunkService

<!-- Node tree element can be either a property with value or an element of an enumerable -->

@{
    var value = GetValue(out bool error); // cache throughout render
    var actualType = value?.GetType() ?? Property?.PropertyType; // type/class of the element
    var supposedType = Property?.PropertyType ?? value?.GetType();

    var typeInfo = default(TypeInfoModel);
    var isNullable = default(bool?);

    if (supposedType is not null)
    {
        (typeInfo, isNullable) = TypeCacheService.GetTypeInfoModel(supposedType, Property);
    }

    var isNodePropertyWithAppliedWithChunkAttributes = false;
    var chunkExists = false;
    var appliedWithChunkAttThatApply = Enumerable.Empty<AppliedWithChunkAttribute>();
    var chunkThatApply = Enumerable.Empty<Type>();

    if (Property is not null && Owner is Node node)
    {
        var propertyAttributes = Property.GetCustomAttributes(inherit: false);

        appliedWithChunkAttThatApply = propertyAttributes.OfType<AppliedWithChunkAttribute>();
        chunkThatApply = appliedWithChunkAttThatApply.Select(x => x.ChunkType);

        foreach (var att in propertyAttributes)
        {
            if (att is not AppliedWithChunkAttribute applAtt)
            {
                continue;
            }

            isNodePropertyWithAppliedWithChunkAttributes = true;

            chunkExists = node.Chunks.Any(applAtt.Applies);

            if (chunkExists)
            {
                break;
            }

            if (node is not INodeHeader nodeHeader)
            {
                continue;
            }

            chunkExists = nodeHeader.HeaderChunks.Any(applAtt.Applies);

            if (chunkExists)
            {
                break;
            }
        }
    }

    var isNotIncluded = isNodePropertyWithAppliedWithChunkAttributes && !chunkExists;
    var isHighlighted = false;

    foreach (var appliedChunkType in chunkThatApply)
    {
        if (OpenChunkService.OpenedChunks.Contains(appliedChunkType))
        {
            isHighlighted = true;
            break;
        }
    }

    // Selection speciality when dealing with closing expanded properties and enumerables
    // This if statement can cause infinite loop in some cases
    /*if (Property is not null && SelectionService.Element?.Property == Property)
    {
        SelectionService.Element = this;
    }*/

    if (Value is not null && SelectionService.Element?.Value == Value)
    {
        SelectionService.Element = this;
    }
}

<div class="element tooltip-top @(isHighlighted ? "highlight" : "")"
     @onmouseover="() => elementOver = true"
     @onmouseout="() => elementOver = false"
     data-title="@(isNotIncluded ? $"Member '{Property?.Name ?? "[unknown]"}' is not available and won't be applied upon saving. Add corresponding chunks to fix this." : null)">

    @if (Property is not null || value is not null) // If its a property or an enumerable element that is not null
    {
        <span class="type @(isNotIncluded ? "not-included-member" : "")">

            <!-- Render the type. Property is used to determine nullability, and is null in case of an enumerable element. -->
            <TypeRenderer Property="Property" TypeInfo="typeInfo" IsNullable="isNullable" />

        </span> <!-- TODO: add debug hover tooltip which displays EVERYTHING about the type (properties scrape) -->
    }

    <span class="member-name @(isNotIncluded ? "not-included-member" : "")" style="@(IsSelected ? "background-color:var(--button-blue)" : "")" @onclick="Select">

    @if (Property is not null) // Property element
    {
        @Property.Name
    }
    else if (Id.HasValue) // Enumerable element
    {
        <span style="font-family: Source Code Pro; font-weight: bold"><span>#</span>@Id.Value</span>
    }

    @{
        var props = Enumerable.Empty<PropertyInfo>();
        var collection = value as ICollection;
        var enumerable = value as IEnumerable;
    }

    </span>

    @if (value is not null && ValueRenderer is not null)
    {
        props = value.GetType()
            .GetProperties()
            .Where(x => x.GetGetMethod()?.IsStatic == false)
            .Where(ValueRenderer.ShowPropertyInTree);

        if ((ValueRenderer.PreferProperties == false && (collection?.Count > 0 || enumerable?.OfType<object>().Any() == true)) || (collection is null && props.Any()))
        {
            <span class="member-name @(isNotIncluded ? "not-included-member" : "")" @onclick="async () => await OnExpandAsync()">

            @if (IsExpanded)
            {
                <span style="animation: fadeIn 0.2s;"><i class="fa-solid fa-caret-up"></i></span>
            }
            else if (IsExpanding)
            {
                <span style="font-size:0.83rem;display:inline-block;animation: fadeIn 0.2s;"><i class="fa-solid fa-hourglass"></i></span>
            }
            else
            {
                <span><i class="fa-solid fa-caret-down"></i></span>
            }

            </span>
        }
    }

    @if (error)
    {
        <span class="value element-box" style="background-color:#DD050555;color:#eee">Error</span>
    }
    else
    {
        // Render a value based on its implemented value renderers

        <span class="value @(isNotIncluded ? "not-included-member" : "")">
            <DynamicComponent Type="ValueRendererService[actualType]" Parameters="GetValueRendererParameters(value, isNullable.GetValueOrDefault(), actualType)" @ref="valueRendererDynamic" />
        </span>
    }

    @if (appliedWithChunkAttThatApply.Any())
    {
        var counterGroup = 0;

        <span class="applied-chunk-tip @(elementOver ? "hovered" : "")">
            <span>
                Applied with:
            </span>

            @foreach (var chunkGroup in appliedWithChunkAttThatApply.GroupBy(x => x.ChunkType.GetInterface("IHeaderChunk")))
            {
                var counterChunk = 0;

                if (counterGroup != 0)
                {
                    <span>, </span>
                }

                foreach (var appliedAtt in chunkGroup)
                {
                    if (counterChunk != 0)
                    {
                        <span>, </span>
                    }

                    @if (!GBX.NET.NodeManager.ChunkIdsByType.TryGetValue(appliedAtt.ChunkType, out uint chunkId))
                    {
                        continue;
                    }

                    <span style="font-family:Source Code Pro">0x@(
                                (chunkId & 0xFFF).ToString("X3")
                                )</span>

                    @if (appliedAtt.SinceVersion != 0 && appliedAtt.UpToVersion is null)
                    {
                        <span> v@(appliedAtt.SinceVersion)+</span>
                    }

                    if (appliedAtt.UpToVersion.HasValue)
                    {
                        <span> v@(appliedAtt.SinceVersion)-@(appliedAtt.UpToVersion.Value)</span>
                    }

                    counterChunk++;
                }

                counterGroup++;

                <span style="margin-left:0.2rem">@(chunkGroup.Key == typeof(IHeaderChunk) ? "header" : "body") chunk@(counterChunk == 1 ? "" : "s")</span>
            }

            @if (isNotIncluded)
            {
                <span style="margin-left:0.2rem">(currently not included)</span>
            }
        </span>
    }
</div>

@if (IsExpanded)
{
    <!-- Render a tree with incremented depth. ParentProperty helps to determine regular property from an enumerable -->
    <NodeTree Object="value" Depth="Depth + 1" ParentProperty="Property" Properties="props" ParentValueRenderer="ValueRenderer" Parent="this" />
}

@code {
    private bool elementOver;

    private object? prevOwner;
    private PropertyInfo? prevProp;
    private int? prevId;

    private DynamicComponent? valueRendererDynamic;

    private ValueRenderer? ValueRenderer => valueRendererDynamic?.Instance as ValueRenderer;

    /// <summary>
    /// Owner of the property. Ignored on enumerable elements.
    /// </summary>
    [Parameter]
    public object? Owner { get; set; }

    /// <summary>
    /// Property of the NodeTreeElement. Ignored on enumerable elements.
    /// </summary>
    [Parameter]
    public PropertyInfo? Property { get; set; }

    /// <summary>
    /// Numeric ID to represent the enumerable element. Ignored on regular properties.
    /// </summary>
    [Parameter]
    public int? Id { get; set; }

    /// <summary>
    /// Value of the enumerable element. Ignored on regular properties.
    /// </summary>
    [Parameter]
    public object? Value { get; set; }

    [Parameter]
    public int Depth { get; set; }

    [Parameter]
    public GbxExplorer.Client.Components.NodeTree Tree { get; set; }

    public bool IsExpanded { get; set; }
    private bool IsExpanding { get; set; }

    public bool IsSelected => SelectionService.Element == this;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(Owner):
                    Owner = parameter.Value;
                    break;
                case nameof(Property):
                    Property = parameter.Value as PropertyInfo;
                    break;
                case nameof(Id):
                    Id = parameter.Value as int?;
                    break;
                case nameof(Value):
                    Value = parameter.Value;
                    break;
                case nameof(Depth):
                    Depth = (int)parameter.Value;
                    break;
                case nameof(Tree):
                    Tree = parameter.Value as NodeTree;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }

        return base.SetParametersAsync(ParameterView.Empty);
    }


    /// <summary>
    /// Either get Value (element of enumerable case), or get it via property (property case).
    /// </summary>
    public object? GetValue(out bool error)
    {
        if (Value is not null)
        {
            error = false;
            return Value;
        }

        if (Property is null || Owner is null)
        {
            error = false;
            return null;
        }

        try
        {
            error = false;
            return Property.GetValue(Owner);
        }
        catch (Exception ex)
        {
            // send error state
            Logger.LogError(ex, "Error while trying to read the member {memberName}!", Property.Name);
            error = true;
            return null;
        }
    }

    /// <summary>
    /// Either get Value (element of enumerable case), or get it via property (property case).
    /// </summary>
    public object? GetValue()
    {
        return GetValue(out _);
    }

    private async Task<bool> OnExpandAsync()
    {
        IsExpanding = true;

        StateHasChanged();
        await Task.Delay(10);

        IsExpanded = !IsExpanded;

        if (IsExpanded)
        {
            if (Property is null)
            {
                Logger.LogInformation("Expanded an unknown node.");
            }
            else
            {
                Logger.LogInformation("Expanded the {memberName} node.", Property.Name);
            }
        }
        else
        {
            if (Property is null)
            {
                Logger.LogInformation("Collapsed an unknown node.");
            }
            else
            {
                Logger.LogInformation("Collapsed the {memberName} node.", Property.Name);
            }
        }

        // needs a refactor so that it doesn't expand this switch statement
        switch (valueRendererDynamic?.Instance)
        {
            case NodeValueRenderer nodeValueRenderer:
                nodeValueRenderer.IsExpanded = IsExpanded;
                break;
            case EnumerableValueRenderer enumerableValueRenderer:
                enumerableValueRenderer.IsExpanded = IsExpanded;
                break;
        }

        IsExpanding = false;

        StateHasChanged();

        return IsExpanded;
    }

    private Dictionary<string, object?> GetValueRendererParameters(object? value, bool isNullable, Type? actualType)
    {
        return new Dictionary<string, object?>
        {
            { "Property", Property },
            { "Value", value },
            { "Expand", async () => await OnExpandAsync() },
            { "Owner", Owner },
            { "NodeTreeElement", this },
            { "IsNullable", isNullable },
            { "ActualType", actualType }
        };
    }

    // testing purposes
    private object? GetValue(PropertyInfo prop, Type type)
    {
        try
        {
            return prop.GetValue(type);
        }
        catch
        {
            return null;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }

        if (SelectionService.Element?.Property is null && Id is not null && Id != prevId)
        {
            if (prevId is not null)
            {
                // Improve this so that it selects the correct element in enumerable
                SelectionService.Element = null;
                IsExpanded = false;
            }

            prevId = Id;
            StateHasChanged();


            return;
        }

        // Owner check is there only to fix weird update problems in Preview section
        if ((prevProp is null && Value is null) || Property != prevProp || Owner != prevOwner)
        {
            OnValueChanged(prevProp);

            prevProp = Property;
            prevOwner = Owner;
        }
    }

    public void SetValue(object? value, bool updateParent = false)
    {
        if (Property is not null)
        {
            Property.SetValue(Owner, value);
        }
        else if (Id.HasValue && Tree?.Object is IList list)
        {
            list[Id.Value] = value;
        }

        Update(updateParent);
    }

    public void Update(bool parent)
    {
        StateHasChanged();

        if (parent)
        {
            Tree?.Update();
        }
    }

    public void Select()
    {
        SelectionService.Element = this;
    }

    private void OnValueChanged(PropertyInfo? prevProp)
    {
        if (prevProp is null || Property == prevProp)
        {
            SelectionService.Update();
        }
        else
        {
            SelectionService.Element = null;
        }
    }
}
