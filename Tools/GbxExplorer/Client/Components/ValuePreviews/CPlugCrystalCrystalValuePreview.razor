@using GBX.NET
@using GBX.NET.Engines.Plug

@inject IJSRuntime JS

@inherits ValuePreview
@attribute [AppliesForType(typeof(CPlugCrystal.Crystal))]

@if (Value is not CPlugCrystal.Crystal crystal)
{
    <span style="color:gray">null</span>

    return;
}

<div id="mesh-renderer" style="margin:1rem 0;position:relative">
    <span style="z-index: 999;position: absolute;top:40%;text-align:center;width:100%">@((MarkupString)statusMsg)</span>
</div>

@code {
    private CPlugCrystal.Crystal? prevCrystal;
    private string statusMsg = "";
    
    [Parameter]
    public string? LayerName { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await JS.InvokeVoidAsync("createScene");
        }

        if (Value is not CPlugCrystal.Crystal c || c == prevCrystal)
        {
            return;
        }

        prevCrystal = c;

        if (!firstRender)
        {
            await JS.InvokeVoidAsync("clearScene");
        }

        statusMsg = "Loading...";
        StateHasChanged();
        await Task.Delay(10);

        var positionsDict = new Dictionary<Vec3, int>();
        var positions = new List<float>();
        var indices = new List<int>();

        statusMsg = string.IsNullOrWhiteSpace(LayerName)
            ? "Finding the center..."
            : LayerName + "<br />Finding the center...";
        StateHasChanged();
        await Task.Delay(10);
        
        var minX = c.Positions.Select(x => x.X).Min();
        var minZ = c.Positions.Select(x => x.Z).Min();
        var maxX = c.Positions.Select(x => x.X).Max();
        var maxZ = c.Positions.Select(x => x.Z).Max();

        var centerX = (minX + maxX) / 2;
        var centerZ = (minZ + maxZ) / 2;

        var distance = 0f;
        var height = 0f;

        statusMsg = string.IsNullOrWhiteSpace(LayerName)
            ? "Acquiring vertices..."
            : LayerName + "<br />Acquiring vertices...";
        StateHasChanged();
        await Task.Delay(10);

        for (int i = 0; i < c.Positions.Length; i++)
        {
            var pos = c.Positions[i];

            if (positionsDict.ContainsKey(pos))
            {
                continue;
            }

            var adjustedX = pos.X - centerX;
            var adjustedY = pos.Z - centerZ;

            positions.Add(adjustedX);
            positions.Add(pos.Y);
            positions.Add(adjustedY);

            positionsDict.Add(pos, positionsDict.Count);

            if (adjustedX > distance) distance = adjustedX;
            if (adjustedY > distance) distance = adjustedY;

            if (pos.Y > height)
            {
                height = pos.Y;
            }
        }

        statusMsg = string.IsNullOrWhiteSpace(LayerName)
            ? "Acquiring indices..."
            : LayerName + "<br />Acquiring indices...";
        StateHasChanged();
        await Task.Delay(10);

        for (var i = 0; i < c.Faces.Length; i++)
        {
            var face = c.Faces[i];

            switch (face.Vertices.Length)
            {
                case 3:
                    for (var j = 0; j < face.Vertices.Length; j++)
                    {
                        indices.Add(positionsDict[face.Vertices[j].Position]);
                    }
                    break;
                case 4:
                    var pos0 = face.Vertices[0].Position;
                    var pos2 = face.Vertices[2].Position;

                    indices.Add(positionsDict[pos0]);
                    indices.Add(positionsDict[face.Vertices[1].Position]);
                    indices.Add(positionsDict[pos2]);
                    indices.Add(positionsDict[pos0]);
                    indices.Add(positionsDict[pos2]);
                    indices.Add(positionsDict[face.Vertices[3].Position]);
                    break;
                default:
                    throw new Exception();
            }
        }

        statusMsg = "";
        StateHasChanged();
        await Task.Delay(10);

        if (JS is not IJSUnmarshalledRuntime webAssemblyJSRuntime)
        {
            throw new Exception();
        }

        webAssemblyJSRuntime.InvokeUnmarshalled<float[], object>("sendVerts", positions.ToArray());
        webAssemblyJSRuntime.InvokeUnmarshalled<int[], object>("sendInds", indices.ToArray());

        await JS.InvokeVoidAsync("createMesh", distance * 1.5f + height * 0.25f, height * 0.5f);
    }
}