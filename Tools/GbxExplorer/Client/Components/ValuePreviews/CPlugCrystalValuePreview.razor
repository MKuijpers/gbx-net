@using GBX.NET
@using GBX.NET.Engines.Plug
@using System.IO.Compression

@inject IJSRuntime JS
@inject IDownloadStreamService DownloadService

@inherits NodeValuePreview
@attribute [AppliesForType(typeof(CPlugCrystal))]

@if (Value is CPlugCrystal crystal)
{
    <div id="mesh-renderer" style="margin:1rem 0;position:relative">
        <span style="z-index: 999;position: absolute;top:40%;text-align:center;width:100%">@(
        (MarkupString)statusMsg
        )</span>
    </div>

    <button class="button" @onclick="ExportToObjAsync"
        style="width:100%;justify-content:center;margin-bottom:0.5rem">Export to .obj file</button>
}

@{
    base.BuildRenderTree(__builder);
}

@code {
    private CPlugCrystal? prevCrystal;
    private string statusMsg = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await JS.InvokeVoidAsync("createScene");
        }

        if (Property?.GetValue(OwnerObject) is not CPlugCrystal crystal || crystal == prevCrystal)
        {
            return;
        }

        prevCrystal = crystal;

        if (!firstRender)
        {
            await JS.InvokeVoidAsync("clearScene");
        }

        statusMsg = "Loading...";
        StateHasChanged();
        await Task.Delay(10);

        var positionsDict = new Dictionary<Vec3, int>();
        var positions = new List<float>();
        var indices = new List<int>();

        statusMsg = "(all layers)<br />Finding the center...";
        StateHasChanged();
        await Task.Delay(10);

        var allPositions = crystal.Layers
            .OfType<CPlugCrystal.GeometryLayer>()
            .SelectMany(x => x.Crystal.Positions);

        var minX = allPositions.Select(x => x.X).Min();
        var minZ = allPositions.Select(x => x.Z).Min();
        var maxX = allPositions.Select(x => x.X).Max();
        var maxZ = allPositions.Select(x => x.Z).Max();

        var centerX = (minX + maxX) / 2;
        var centerZ = (minZ + maxZ) / 2;

        var distance = 0f;
        var height = 0f;

        foreach (var layer in crystal.Layers.OfType<CPlugCrystal.GeometryLayer>())
        {
            var c = layer.Crystal;

            if (c is null)
            {
                return;
            }

            statusMsg = layer.LayerName + "<br />Acquiring vertices...";
            StateHasChanged();
            await Task.Delay(10);

            for (int i = 0; i < c.Positions.Length; i++)
            {
                var pos = c.Positions[i];

                if (positionsDict.ContainsKey(pos))
                {
                    continue;
                }

                var adjustedX = pos.X - centerX;
                var adjustedY = pos.Z - centerZ;

                positions.Add(adjustedX);
                positions.Add(pos.Y);
                positions.Add(adjustedY);

                positionsDict.Add(pos, positionsDict.Count);

                if (adjustedX > distance) distance = adjustedX;
                if (adjustedY > distance) distance = adjustedY;

                if (pos.Y > height)
                {
                    height = pos.Y;
                }
            }

            statusMsg = layer.LayerName + "<br />Acquiring indices...";
            StateHasChanged();
            await Task.Delay(10);

            for (var i = 0; i < c.Faces.Length; i++)
            {
                var face = c.Faces[i];

                switch (face.Vertices.Length)
                {
                    case 3:
                        for (var j = 0; j < face.Vertices.Length; j++)
                        {
                            indices.Add(positionsDict[face.Vertices[j].Position]);
                        }
                        break;
                    case 4:
                        var pos0 = face.Vertices[0].Position;
                        var pos2 = face.Vertices[2].Position;

                        indices.Add(positionsDict[pos0]);
                        indices.Add(positionsDict[face.Vertices[1].Position]);
                        indices.Add(positionsDict[pos2]);
                        indices.Add(positionsDict[pos0]);
                        indices.Add(positionsDict[pos2]);
                        indices.Add(positionsDict[face.Vertices[3].Position]);
                        break;
                    default:
                        throw new Exception();
                }
            }
        }

        statusMsg = "";
        StateHasChanged();
        await Task.Delay(10);

        if (JS is not IJSUnmarshalledRuntime webAssemblyJSRuntime)
        {
            throw new Exception();
        }

        webAssemblyJSRuntime.InvokeUnmarshalled<float[], object>("sendVerts", positions.ToArray());
        webAssemblyJSRuntime.InvokeUnmarshalled<int[], object>("sendInds", indices.ToArray());

        await JS.InvokeVoidAsync("createMesh", distance * 1.5f + height * 0.25f, height * 0.5f);
    }

    private async Task ExportToObjAsync()
    {
        if (Property?.GetValue(OwnerObject) is not CPlugCrystal crystal)
        {
            return;
        }

        var fileName = Gbx?.FileName ?? "Crystal";

        using var ms = new MemoryStream();
        using var objMsStream = new MemoryStream();
        using var mtlMsStream = new MemoryStream();

        crystal.ExportToObj(objMsStream, mtlMsStream, leaveOpen: true);

        objMsStream.Position = 0;
        mtlMsStream.Position = 0;

        using (var zip = new ZipArchive(ms, ZipArchiveMode.Create))
        {
            var objEntry = zip.CreateEntry(fileName + ".obj");
            
            using (var objStream = objEntry.Open())
            {
                objMsStream.CopyTo(objStream);
            }

            var mtlEntry = zip.CreateEntry(fileName + ".mtl");
            
            using (var mtlStream = mtlEntry.Open())
            {
                mtlMsStream.CopyTo(mtlStream);
            }
        }

        await DownloadService.DownloadAsync(fileName + ".zip", ms);
    }
}