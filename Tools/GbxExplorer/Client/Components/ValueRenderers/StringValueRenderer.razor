@using GBX.NET
@using GBX.NET.Attributes

@inherits ValueRenderer
@attribute [AppliesForType(typeof(string))]

@if (Value is null)
{
    <span class="element-box hoverable" @onclick="InitValue" data-title="The value doesn't exist. Click to create a value.">null</span>

    @if (nullifiedValue is not null)
    {
        <span class="element-box hoverable utility" data-title="Revert value that was there before." @onclick="Revert">Revert</span>
    }
}
else if (Value is string str)
{
    var cannotWrite = Property?.CannotWrite() == true;

    if (IsFormatted && !editFormatted)
    {
        <span class="element-box hoverable"
            style="@(string.IsNullOrEmpty(str) ? "" : "color:#eee;")font-weight:normal;min-width: 160px;"
            data-title="Click to reveal the text."
            @onclick="() => editFormatted = true">

            <FormattedText Text="@(string.IsNullOrEmpty(str) ? "(empty)" : str)"></FormattedText>
        </span>
    }
    else
    {
        <span data-title="@(cannotWrite ? "This value cannot be modified." : "")">
            <input type="text"
                @bind="Str"
                disabled="@cannotWrite"
                placeholder="(empty)"
                style="min-width: 160px;width: @(Str?.Length)ch;max-width:512px"
                oninput="onInputText(this)"/>
        </span>
    }

    @if (str?.Length > 0)
    {
        <span class="element-box" data-title="This string has a length of @str.Length characters.">@str.Length</span>
    }

    if (editFormatted)
    {
        <span class="element-box hoverable utility" @onclick="Visualize">Visualize</span>
    }

    if (!cannotWrite && (IsNullable || Field is not null))
    {
        <span class="element-box hoverable utility" data-title="Set this member to null." @onclick="Nullify">Nullify</span>
    }
}

@code {
    private string? nullifiedValue;
    private bool editFormatted;
    
    public override bool PreferProperties => true;

    public string? Str
    {
        get => Value as string;
        set => SetAndUpdate(value, parent: true);
    }

    public override bool ShowPropertyInTree(PropertyInfo prop) => false;

    public bool IsFormatted => Property is not null && Attribute.IsDefined(Property, typeof(SupportsFormattingAttribute));

    private void InitValue()
    {
        SetAndUpdate("", parent: true);
    }

    private void Nullify()
    {
        nullifiedValue = Str;
        SetAndUpdate(null, parent: true);
    }

    private void Revert()
    {
        SetAndUpdate(nullifiedValue, parent: true);
        LogReversion(nullifiedValue);
    }

    private void Visualize()
    {
        editFormatted = false;
    }
}
