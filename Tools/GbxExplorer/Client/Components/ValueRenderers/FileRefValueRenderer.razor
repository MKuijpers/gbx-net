@using GBX.NET

@inherits ValueRenderer
@attribute [AppliesForType(typeof(FileRef))]

@if (Value is null)
{
    <span class="element-box hoverable" @onclick="InitValue" data-title="The value doesn't exist. Click to create a value.">null</span>

    @if (nullifiedValue is not null)
    {
        <span class="element-box hoverable utility" data-title="Revert value that was there before." @onclick="Revert">Revert</span>
    }
}
else
{
    var str = Value.ToString();
    var cannotWrite = Property?.CannotWrite() == true;

    <span class="element-box" style="font-size: 0.8rem" data-title="This is the ToString value of the general object.">@(string.IsNullOrWhiteSpace(str) ? "(empty)" : str)</span>

    if (!cannotWrite && (IsNullable || Field is not null))
    {
        <span class="element-box hoverable utility" data-title="Set this member to null." @onclick="Nullify">Nullify</span>
    }
}

@code {
    private FileRef? nullifiedValue;

    public override bool ShowPropertyInTree(PropertyInfo prop) => false;

    public FileRef? Val
    {
        get => Value as FileRef;
        set => SetAndUpdate(value, parent: true);
    }

    private void InitValue()
    {
        SetAndUpdate(FileRef.Default, parent: true);
    }

    private void Nullify()
    {
        nullifiedValue = Val;
        SetAndUpdate(null, parent: true);
        LogNullified(nullifiedValue);
    }

    private void Revert()
    {
        SetAndUpdate(nullifiedValue, parent: true);
        LogReversion(nullifiedValue);
    }
}
