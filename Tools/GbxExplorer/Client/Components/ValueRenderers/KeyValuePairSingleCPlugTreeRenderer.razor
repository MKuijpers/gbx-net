@using GBX.NET
@using GBX.NET.Engines.Plug;

@inherits ValueRenderer
@attribute [AppliesForType(typeof(KeyValuePair<float, CPlugTree>))]

<input type="text" @bind="Key" style="min-width: 4ch; width: @(Key.ToString().Length)ch;" oninput="onInputText(this)" />

<CPlugTreeValueRenderer Value="Val"></CPlugTreeValueRenderer>

@code {
    public float Key
    {
        get => ((KeyValuePair<float, CPlugTree>)Value).Key;
        set
        {
            var key = Key;

            if (NodeTreeElement?.Tree?.Object is not IDictionary<float, CPlugTree> dict || dict.ContainsKey(value))
            {
                return;
            }

            var val = ((KeyValuePair<float, CPlugTree>)Value).Value;

            dict.Remove(key);
            dict.Add(value, val);

            NodeTreeElement?.Update(parent: true);
        }
    }

    public CPlugTree Val => ((KeyValuePair<float, CPlugTree>)Value).Value;
}
