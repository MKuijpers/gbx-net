@inject ILogger Logger

@if (Value is null)
{
    <span class="element-box" data-title="This value cannot be modified.">null</span>
}
else
{
    var str = Value.ToString();

    <span class="element-box" style="font-size: 0.8rem" data-title="This is the ToString value of the general object. It cannot be modified.">@(string.IsNullOrWhiteSpace(str) ? "(empty)" : str)</span>
}

@code {
    private object? prevVal;

    [Parameter]
    public PropertyInfo? Property { get; set; }

    [Parameter]
    public object? Value { get; set; }

    [Parameter]
    public Func<Task<bool>>? Expand { get; set; }

    [Parameter]
    public object? Owner { get; set; }

    [Parameter]
    public NodeTreeElement? NodeTreeElement { get; set; }

    [Parameter]
    public bool IsNullable { get; set; }

    [Parameter]
    public Type ActualType { get; set; } = typeof(object);

    [Parameter]
    public FieldInfo? Field { get; set; }

    [Parameter]
    public ChunkViewer? ChunkViewer { get; set; }

    public bool IsExpanded { get; set; }

    public virtual bool PreferProperties => false;

    public virtual bool ShowPropertyInTree(PropertyInfo prop)
    {
        return true;
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case nameof(Property):
                    Property = parameter.Value as PropertyInfo;
                    break;
                case nameof(Value):
                    Value = parameter.Value;
                    break;
                case nameof(Expand):
                    Expand = parameter.Value as Func<Task<bool>>;
                    break;
                case nameof(Owner):
                    Owner = parameter.Value;
                    break;
                case nameof(NodeTreeElement):
                    NodeTreeElement = parameter.Value as NodeTreeElement;
                    break;
                case nameof(IsNullable):
                    IsNullable = (bool)parameter.Value;
                    break;
                case nameof(ActualType):
                    ActualType = (Type)parameter.Value;
                    break;
                case nameof(Field):
                    Field = parameter.Value as FieldInfo;
                    break;
                case nameof(ChunkViewer):
                    ChunkViewer = parameter.Value as ChunkViewer;
                    break;
                default:
                    throw new ArgumentException($"Unknown parameter: {parameter.Name}");
            }
        }

        return base.SetParametersAsync(ParameterView.Empty);
    }

    protected async Task OnExpandAsync()
    {
        if (Expand is not null)
        {
            IsExpanded = await Expand();
        }
    }

    protected void SetAndUpdate(object? value, bool parent = false)
    {
        Value = value;
        NodeTreeElement?.SetValue(Value, parent);
        Field?.SetValue(Owner, value);

        if (NodeTreeElement is null)
        {
            Property?.SetValue(Owner, value);
        }

        Logger.LogInformation("{name} has been set to {val}.", Property?.Name ?? "[unknown]", value);

        ChunkViewer?.Update();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (prevVal is not null && object.Equals(Value, prevVal))
        {
            return;
        }

        await OnValueChangedAsync(prevVal);

        prevVal = Value;
    }

    protected virtual Task OnValueChangedAsync(object? previousValue)
    {
        return Task.CompletedTask;
    }

    protected void LogNullified(object? nullifiedValue)
    {
        Logger.LogInformation("Nullified {name}. {val} was stored for possible reversion.", Property?.Name ?? "[unknown]", nullifiedValue);
    }

    protected void LogReversion(object? nullifiedValue)
    {
        Logger.LogInformation("{name} was reverted to {val}.", Property?.Name ?? "[unknown]", nullifiedValue);
    }
}
