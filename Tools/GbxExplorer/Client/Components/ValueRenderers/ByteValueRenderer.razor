@using GBX.NET

@inherits ValueRenderer
@attribute [AppliesForType(typeof(byte))]

@if (Value is null)
{
    <span class="element-box hoverable" @onclick="InitValue" data-title="The value doesn't exist. Click to create a value.">null</span>

    @if (nullifiedValue.HasValue)
    {
        <span class="element-box hoverable utility" data-title="Revert value that was there before." @onclick="Revert">Revert</span>
    }
}
else if (Value is byte val)
{
    var cannotWrite = Property?.CannotWrite() == true;

    <input type="text" @bind="Val" disabled="@cannotWrite" style="min-width: 3ch; width: @(val.ToString().Length)ch;" oninput="onInputText(this)" />

    if (!cannotWrite && IsNullable)
    {
        <span class="element-box hoverable utility" data-title="Set this member to null." @onclick="Nullify">Nullify</span>
    }
}
else
{
    <span>Error: value is not byte</span>
}

@code {
    private byte? nullifiedValue;

    public byte? Val
    {
        get => Value as byte?;
        set => SetAndUpdate(value, parent: true);
    }

    private void InitValue()
    {
        SetAndUpdate(default(byte), parent: true);
    }

    private void Nullify()
    {
        nullifiedValue = Val;
        SetAndUpdate(null, parent: true);
        LogNullified(nullifiedValue);
    }

    private void Revert()
    {
        SetAndUpdate(nullifiedValue, parent: true);
        LogReversion(nullifiedValue);
    }
}
