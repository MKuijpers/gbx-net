@page "/help"

@inject IBaseAddressService BaseAddressService
@inject ISettingsService SettingsService
@inject IValueRendererService ValueRendererService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IConfiguration Config

<div class="centered-container">
    <div class="section help">
        <div style="font-size:1.7rem;font-weight:bold;text-align:center">Help, tips, and tricks</div>
        <div>
            <p class="centered">Gbx is a file format of a <a href="https://en.wikipedia.org/wiki/Serialization" target="_blank">serialized</a> object taken from the Nadeo game engine (GameBox / GbxGame).</p>
            <big>List of supported Gbx files in GBX.NET Explorer is available <a href="https://github.com/BigBang1112/gbx-net/blob/@(Config["Branch"] ?? "master")/SUPPORTED_GBX_FILE_TYPES.md" target="_blank">here</a>.</big>
            <big style="font-size: 2rem">Node = Object</big>
            <p class="centered">The engine calls its objects <b>"nodes"</b> so this standard was acquired in the application.</p>
            <p class="centered"><b>Main node</b> is the root object of the Gbx file.</p>
            <big>Chunk</big>
            <p>Gbx is mostly constructed out of data chunks to represent values of class members. These data chunks make backwards compatibility possible. GBX.NET Explorer has features to play with them in the <b>Value preview</b> section.</p>
            <p>A chunk can "affect" a class member by its existence in Gbx. In GBX.NET Explorer, this is visually shown by darkening members that were simply not part of the Gbx import, or are not going to be part of the exported Gbx.</p>
            <p>Not all meanings of values in these chunks were found, so these "unknown" values are stored in the <b>Value preview</b> section inside the chunk properties, which you can expand by clicking on the chunk definition.</p>
            <big>Value preview</big>
            <p>Value preview exists to present more information that didn't fit into one-liner. It is separated into two parts: selected value / main node. By default, all classes inheriting <b>CMwNod</b> have a set of chunk manipulation features (except <b>CGameCtnBlock</b>), and sometimes, they include a specialized preview at the top of it (<b>CPlugCrystal</b> for example).</p>
            <big>Exporting Gbx files</big>
            <p>There's a question if you wish to export the Gbx for old Trackmania games. This exists because of "old class IDs". Set this option to <b>Yes</b> when you make Gbx files for these games, otherwise these games will constantly crash when attempting to use them.</p>
            <big>Export selected node to Gbx</big>
            <p>You can create new Gbx files from many of the <b>CMwNod</b>-based classes! Just click on the <b>name</b> of the class member to let GBX.NET Explorer know which node to export.</p>
        </div>
        <a href="@BaseAddressService.GetRoot()" class="button" style="justify-content:center">Let's continue exploring!</a>
    </div>
</div>

@code {
    
}
