@inject IGbxService GbxService

<div class="section section-node-tree-explorer @(selectedGbx is null ? "centered-note" : "")">

    @if (selectedGbx is null)
    {
        <span>No *.Gbx is selected.</span>
    }
    else
    {
        <div style="display: flex;padding-left: 5px;">
            <div style="display: flex;flex-direction: column;overflow:hidden;">
                <big style="font-size:1.5rem;font-weight:bold;max-width: max-content;overflow:hidden;text-overflow: ellipsis;margin-right:0.5rem">@selectedGbx.FileName</big>
                <p style="font-size: 0.6rem;overflow-wrap: anywhere;">SHA256: <span style="font-family: 'Source Code Pro', monospace;">@selectedGbx.Sha256</span></p>
            </div>
            <div style="margin-left: auto; margin-right: 0;">

            @if (selectedGbx.Inheritance.HasValue)
            {
                <InheritanceDisplay
                    Types="selectedGbx.Inheritance.Value"
                    Selectable="false"
                    JustifyContentRight="true"
                    OnTypeClick="OnTypeClick"/>
            }

            </div>
        </div>

        <div style="background-color:#0505055F;border-radius:0.2rem;padding:1rem;flex:1;overflow:auto;">
            <div class="tree-overflow @(selectedGbx.Gbx.Node is null ? "centered-note" : "")">

            @if (selectedGbx.Gbx.Node is null)
            {
                <span>This Gbx is not supported in the Node Tree Explorer.</span>
            }
            else
            {
                var props = selectedGbx.Gbx.Node
                    .GetType()
                    .GetProperties()
                    .Where(NodeValueRenderer.TreeFilterStatic);

                <NodeTree @ref="mainNodeTree" Object="selectedGbx.Gbx.Node" Properties="props" />
            }

            </div>
        </div>
    }

</div>

@code {
    private GbxModel? selectedGbx;
    private NodeTree? mainNodeTree;

    [Parameter]
    public EventCallback<TypeModel> OnTypeClick { get; set; }

    protected override void OnInitialized()
    {
        selectedGbx = GbxService.SelectedGbx;
    }

    public void Select(GbxModel gbx)
    {
        selectedGbx = gbx;
        StateHasChanged();
    }

    public void Update()
    {
        StateHasChanged();
    }
}
